Assignment-12
1.)Create database
	> use orders;
	switched to db orders

2.)Create a collection in mongodb
	> db.createCollection("Order");
	{ "ok" : 1 }

3.)Create Capped Collection
	> db.createCollection("cappedCol",{ capped : true, size:5});
	{ "ok" : 1 }
	> db.cappedCol.isCapped();
	true

//Refer to :: https://docs.mongodb.com/manual/core/capped-collections/


4.)Insert a document into collection

	> db.Order.insert({orderid:1},{customer:"Devaki"},{order_det:[
	... 
	... 
	> db.Order.insert( {orderid:1,customer:"Devaki",order_det: 	[ {product_name:"Phone",price:15000,qty:12}],total_amount:200000,mobile:9012356278});
	WriteResult({ "nInserted" : 1 })
	> db.Order.find().pretty();
	{
		"_id" : ObjectId("5d78bbe37153cd2fd50fa834"),
		"orderid" : 1,
		"customer" : "Devaki",
		"order_det" : [
		{
			"product_name" : "Phone",
			"price" : 15000,
			"qty" : 12
		}
				],
		"total_amount" : 200000
	}
> db.Order.insert( {orderid:2,customer:"Isha",order_det: [ {product_name:"Books",price:500,qty:3}],total_amount:1500});
WriteResult({ "nInserted" : 1 })
> db.Order.find();
{ "_id" : ObjectId("5d78bbe37153cd2fd50fa834"), "orderid" : 1, "customer" : "Devaki", "order_det" : [ { "product_name" : "Phone", "price" : 15000, "qty" : 12 } ], "total_amount" : 200000 }
{ "_id" : ObjectId("5d78bca27153cd2fd50fa835"), "orderid" : 2, "customer" : "Isha", "order_det" : [ { "product_name" : "Books", "price" : 500, "qty" : 3 } ], "total_amount" : 1500 }
> db.Order.find().pretty();
{
	"_id" : ObjectId("5d78bbe37153cd2fd50fa834"),
	"orderid" : 1,
	"customer" : "Devaki",
	"order_det" : [
		{
			"product_name" : "Phone",
			"price" : 15000,
			"qty" : 12
		}
	],
	"total_amount" : 200000
}
{
	"_id" : ObjectId("5d78bca27153cd2fd50fa835"),
	"orderid" : 2,
	"customer" : "Isha",
	"order_det" : [
		{
			"product_name" : "Books",
			"price" : 500,
			"qty" : 3
		}
	],
	"total_amount" : 1500
}


5.)Update a document into collection
	
	> db.Order.insert( {orderid:2,customer:"Isha",order_det: 	[ {product_name:"Books",price:500,qty:3}],total_amount:1500,mobile:9012345671});
	WriteResult({ "nInserted" : 1 })

6.)Remove a document from collection
	> db.Order.remove({orderid: 1});
	WriteResult({ "nRemoved" : 1 })
	> db.Order.find().pretty();
	{
		"_id" : ObjectId("5d78c29542c3d8bde18d17cf"),
		"orderid" : 2,
		"customer" : "Isha",
		"order_det" : [
			{
				"product_name" : "Books",
				"price" : 500,
				"qty" : 3
			}
		],
		"total_amount" : 1500,
		"mobile" : 9012345671
	}
	{
		"_id" : ObjectId("5d78c35142c3d8bde18d17d1"),
		"orderid" : 3,
		"customer" : "Vinay",
		"order_det" : [
			{
				"product_name" : "Gifts",
				"price" : 1500,
				"qty" : 10
			}
				],
		"total_amount" : 20000,
		"mobile" : 9012356238
	}
	{
		"_id" : ObjectId("5d78ca7742c3d8bde18d17d2"),
		"orderid" : 4,
		"marks" : [
			50,
			60,
			7,
			8
		]
	}

8.)To drop a particular collection
	> db.Newcol.drop();
	   true	

9.)save()
	> db.Order.save( {orderid:2,customer:"Isha",order_det: 	[ {product_name:"Books",price:500,qty:3}],total_amount:1500});
	WriteResult({ "nInserted" : 1 })
	> db.Order.find().pretty();
	{
		"_id" : ObjectId("5d78c29542c3d8bde18d17cf"),
		"orderid" : 2,
		"customer" : "Isha",
		"order_det" : [
		{
			"product_name" : "Books",
			"price" : 500,
			"qty" : 3
		}
			],
		"total_amount" : 1500,
		"mobile" : 9012345671
	}
	{
		"_id" : ObjectId("5d78c35142c3d8bde18d17d1"),
		"orderid" : 3,
		"customer" : "Vinay",
		"order_det" : [
		{
			"product_name" : "Gifts",
			"price" : 1500,
			"qty" : 10
		}
		],
		"total_amount" : 20000,
		"mobile" : 9012356238
	}
	{
		"_id" : ObjectId("5d78ca7742c3d8bde18d17d2"),
		"orderid" : 4,
		"marks" : [
			50,
			60,
			7,
			8
		]
	}
	
 10.)upsert()

upsert
#true condition
@If no other field other than search condition is used in update statement, document is not added.


> db.Order.update({orderid:5},{$set:{name:"hello"}},{upsert:true});
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 1,
	"nModified" : 0,
	"_id" : ObjectId("5d7b442f27e7168f07d28a81")
})
> db.Order.find().pretty();
{
	"_id" : ObjectId("5d78c35142c3d8bde18d17d1"),
	"orderid" : 3,
	"customer" : "Vinay",
	"order_det" : [
		{
			"product_name" : "Gifts",
			"price" : 1500,
			"qty" : 10
		}
	],
	"total_amount" : 20000,
	"mobile" : 9012356238
}
{ "_id" : ObjectId("5d78ca7742c3d8bde18d17d2"), "upsert" : true }

{
	"_id" : ObjectId("5d7b385f6943ec71f54524bd"),
	"orderid" : 1,
	"customer" : "Shweta",
	"order_det" : [
		{
			"product_name" : "pencils",
			"price" : 10,
			"qty" : 3
		}
	],
	"total_amount" : 30,
	"mobile" : 9112345671
}
{
	"_id" : ObjectId("5d7b39006943ec71f54524be"),
	"orderid" : 7,
	"customer" : "JashG",
	"order_det" : [
		{
			"product_name" : "pouch",
			"price" : 50,
			"qty" : 3
		},
		{
			"product_name" : "pouch",
			"price" : 10,
			"qty" : 3
		}
	],
	"total_amount" : 180,
	"mobile" : 8112345671
}
{
	"_id" : ObjectId("5d7b442f27e7168f07d28a81"),
	"orderid" : 5,
	"name" : "hello"
}

#false condition:
@If document does not exist and if upsert=false,then it is not added to collection.

> db.Order.update({orderid:5},{$set:{name:"Harry"}},{upsert:false});
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })

11.)bulk()

> var v={orderid:1,customer:"Shweta",order_det: [ {product_name:"pencils",price:10,qty:3}],total_amount:30,mobile:9112345671};
> var v1={orderid:7,customer:"Jash",order_det: [ {product_name:"pouch",price:50,qty:3},{product_name:"pouch",price:10,qty:3}],total_amount:180,mobile:8112345671};

> var bulk=db.Order.initializeOrderedBulkOp();
> bulk.insert(v)
> bulk.execute();
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 1,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
> db.Order.find().pretty();
{
	"_id" : ObjectId("5d78c29542c3d8bde18d17cf"),
	"orderid" : 2,
	"customer" : "Isha",
	"order_det" : [
		{
			"product_name" : "Books",
			"price" : 500,
			"qty" : 3
		}
	],
	"total_amount" : 1500,
	"mobile" : 9012345671
}
{
	"_id" : ObjectId("5d78c35142c3d8bde18d17d1"),
	"orderid" : 3,
	"customer" : "Vinay",
	"order_det" : [
		{
			"product_name" : "Gifts",
			"price" : 1500,
			"qty" : 10
		}
	],
	"total_amount" : 20000,
	"mobile" : 9012356238
}
{
	"_id" : ObjectId("5d78ca7742c3d8bde18d17d2"),
	"orderid" : 4,
	"marks" : [
		50,
		60,
		7,
		8
	]
}
{
	"_id" : ObjectId("5d7b34bd6943ec71f54524bc"),
	"orderid" : 2,
	"customer" : "Isha",
	"order_det" : [
		{
			"product_name" : "Books",
			"price" : 500,
			"qty" : 3
		}
	],
	"total_amount" : 1500
}
{
	"_id" : ObjectId("5d7b385f6943ec71f54524bd"),
	"orderid" : 1,
	"customer" : "Shweta",
	"order_det" : [
		{
			"product_name" : "pencils",
			"price" : 10,
			"qty" : 3
		}
	],
	"total_amount" : 30,
	"mobile" : 9112345671
}

///		MAXIMUM TOTAL 
> db.Order.aggregate([{$group:{_id:"NULL",maxAmount :{$max : "$total_amount"}}}])
{ "_id" : "NULL", "maxAmount" : 200000 }





